/******/ (() => { // webpackBootstrap
/*!*********************************!*\
  !*** ./src/Frontend/content.js ***!
  \*********************************/
window.onload = function () {
  if (typeof chrome === 'undefined' || !chrome.runtime) {
    console.warn('Chrome extension APIs are not available');
    return;
  }
  function sendMessageToBackground(message) {
    try {
      chrome.runtime.sendMessage(message, function (response) {
        if (chrome.runtime.lastError) {
          console.warn('Error sending message:', chrome.runtime.lastError);
          return;
        }
      });
    } catch (error) {
      console.warn('Error in sendMessage:', error);
    }
  }
  function safelyStoreProgress(progress, title) {
    try {
      chrome.storage.sync.set({
        videoProgress: progress,
        title: title
      }, () => {
        if (chrome.runtime.lastError) {
          console.warn('Error storing progress:', chrome.runtime.lastError);
          return;
        }
        console.log('Progress stored:', progress);
      });
    } catch (error) {
      console.warn('Error in storage:', error);
    }
  }
  function initializeVideoTracking() {
    const videoElement = document.querySelector('video');
    if (!videoElement) {
      console.warn("No video element found.");
      return;
    }
    videoElement.addEventListener('timeupdate', () => {
      chrome.storage.sync.get(['videoCompleted'], result => {
        if (result.videoCompleted) {
          return;
        }
        const progress = videoElement.currentTime / videoElement.duration * 100;
        const videoTitle = document.title;
        const progressFixed = progress.toFixed(2);
        sendMessageToBackground({
          type: "progress_update",
          videoProgress: progressFixed,
          videoTitle: videoTitle
        });
        safelyStoreProgress(progressFixed, videoTitle);
        if (progress == 100) {
          try {
            chrome.storage.sync.set({
              videoCompleted: true
            }, () => {
              if (chrome.runtime.lastError) {
                console.warn('Error storing completion:', chrome.runtime.lastError);
              }
            });
          } catch (error) {
            console.warn('Error storing completion:', error);
          }
        }
      });
    });
  }

  // Start tracking after a small delay to ensure everything is loaded
  setTimeout(initializeVideoTracking, 1000);
};
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sQ0FBQ08sU0FBUyxFQUFFO2dCQUMxQk4sT0FBTyxDQUFDQyxJQUFJLENBQUMsMkJBQTJCLEVBQUVILE1BQU0sQ0FBQ0MsT0FBTyxDQUFDTyxTQUFTLENBQUM7Y0FDdkU7WUFDSixDQUFDLENBQUM7VUFDTixDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO1lBQ1pQLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLDJCQUEyQixFQUFFTSxLQUFLLENBQUM7VUFDcEQ7UUFDSjtNQUNKLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUVKOztFQUVBO0VBQ0F1QixVQUFVLENBQUNkLHVCQUF1QixFQUFFLElBQUksQ0FBQztBQUMzQyxDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRnJvbnRlbmQvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0eXBlb2YgY2hyb21lID09PSAndW5kZWZpbmVkJyB8fCAhY2hyb21lLnJ1bnRpbWUpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdDaHJvbWUgZXh0ZW5zaW9uIEFQSXMgYXJlIG5vdCBhdmFpbGFibGUnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gIH1cclxuICBmdW5jdGlvbiBzZW5kTWVzc2FnZVRvQmFja2dyb3VuZChtZXNzYWdlKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBzZW5kaW5nIG1lc3NhZ2U6JywgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGluIHNlbmRNZXNzYWdlOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHNhZmVseVN0b3JlUHJvZ3Jlc3MocHJvZ3Jlc3MsIHRpdGxlKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7IFxyXG4gICAgICAgICAgICAgIHZpZGVvUHJvZ3Jlc3M6IHByb2dyZXNzLFxyXG4gICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVxyXG4gICAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBzdG9yaW5nIHByb2dyZXNzOicsIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Byb2dyZXNzIHN0b3JlZDonLCBwcm9ncmVzcyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgaW4gc3RvcmFnZTonLCBlcnJvcik7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG4gXHJcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVZpZGVvVHJhY2tpbmcoKSB7XHJcbiAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJyk7XHJcbiAgICAgIGlmICghdmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJObyB2aWRlbyBlbGVtZW50IGZvdW5kLlwiKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoWyd2aWRlb0NvbXBsZXRlZCddLCAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQudmlkZW9Db21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9ICh2aWRlb0VsZW1lbnQuY3VycmVudFRpbWUgLyB2aWRlb0VsZW1lbnQuZHVyYXRpb24pICogMTAwO1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlb1RpdGxlID0gZG9jdW1lbnQudGl0bGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzRml4ZWQgPSBwcm9ncmVzcy50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICBzZW5kTWVzc2FnZVRvQmFja2dyb3VuZCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInByb2dyZXNzX3VwZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdmlkZW9Qcm9ncmVzczogcHJvZ3Jlc3NGaXhlZCxcclxuICAgICAgICAgICAgICAgIHZpZGVvVGl0bGU6IHZpZGVvVGl0bGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNhZmVseVN0b3JlUHJvZ3Jlc3MocHJvZ3Jlc3NGaXhlZCwgdmlkZW9UaXRsZSk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzID09IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7IHZpZGVvQ29tcGxldGVkOiB0cnVlIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBzdG9yaW5nIGNvbXBsZXRpb246JywgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIHN0b3JpbmcgY29tcGxldGlvbjonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICAvLyBTdGFydCB0cmFja2luZyBhZnRlciBhIHNtYWxsIGRlbGF5IHRvIGVuc3VyZSBldmVyeXRoaW5nIGlzIGxvYWRlZFxyXG4gIHNldFRpbWVvdXQoaW5pdGlhbGl6ZVZpZGVvVHJhY2tpbmcsIDEwMDApO1xyXG59OyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJvbmxvYWQiLCJjaHJvbWUiLCJydW50aW1lIiwiY29uc29sZSIsIndhcm4iLCJzZW5kTWVzc2FnZVRvQmFja2dyb3VuZCIsIm1lc3NhZ2UiLCJzZW5kTWVzc2FnZSIsInJlc3BvbnNlIiwibGFzdEVycm9yIiwiZXJyb3IiLCJzYWZlbHlTdG9yZVByb2dyZXNzIiwicHJvZ3Jlc3MiLCJ0aXRsZSIsInN0b3JhZ2UiLCJzeW5jIiwic2V0IiwidmlkZW9Qcm9ncmVzcyIsImxvZyIsImluaXRpYWxpemVWaWRlb1RyYWNraW5nIiwidmlkZW9FbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldCIsInJlc3VsdCIsInZpZGVvQ29tcGxldGVkIiwiY3VycmVudFRpbWUiLCJkdXJhdGlvbiIsInZpZGVvVGl0bGUiLCJwcm9ncmVzc0ZpeGVkIiwidG9GaXhlZCIsInR5cGUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==