/******/ (() => { // webpackBootstrap
/*!*********************************!*\
  !*** ./src/Frontend/content.js ***!
  \*********************************/
window.onload = function () {
  if (typeof chrome === 'undefined' || !chrome.runtime) {
    console.warn('Chrome extension APIs are not available');
    return;
  }
  function sendMessageToBackground(message) {
    try {
      chrome.runtime.sendMessage(message, function (response) {
        if (chrome.runtime.lastError) {
          console.warn('Error sending message:', chrome.runtime.lastError);
          return;
        }
      });
    } catch (error) {
      console.warn('Error in sendMessage:', error);
    }
  }
  function safelyStoreProgress(progress, title) {
    try {
      chrome.storage.sync.set({
        videoProgress: progress,
        title: title
      }, function () {
        if (chrome.runtime.lastError) {
          console.warn('Error storing progress:', chrome.runtime.lastError);
          return;
        }
        console.log('Progress stored:', progress);
      });
    } catch (error) {
      console.warn('Error in storage:', error);
    }
  }
  function initializeVideoTracking() {
    var videoElement = document.querySelector('video');
    if (!videoElement) {
      console.warn("No video element found.");
      return;
    }
    videoElement.addEventListener('timeupdate', function () {
      chrome.storage.sync.get(['videoCompleted'], function (result) {
        if (result.videoCompleted) {
          return;
        }
        var progress = videoElement.currentTime / videoElement.duration * 100;
        var videoTitle = document.title;
        var progressFixed = progress.toFixed(2);
        sendMessageToBackground({
          type: "progress_update",
          videoProgress: progressFixed,
          videoTitle: videoTitle
        });
        safelyStoreProgress(progressFixed, videoTitle);
        if (progress == 100) {
          try {
            chrome.storage.sync.set({
              videoCompleted: true
            }, function () {
              if (chrome.runtime.lastError) {
                console.warn('Error storing completion:', chrome.runtime.lastError);
              }
            });
          } catch (error) {
            console.warn('Error storing completion:', error);
          }
        }
      });
    });
  }
  setTimeout(initializeVideoTracking, 1000);
};
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0MsT0FBTyxDQUFDTyxTQUFTLEVBQUU7Z0JBQzFCTixPQUFPLENBQUNDLElBQUksQ0FBQywyQkFBMkIsRUFBRUgsTUFBTSxDQUFDQyxPQUFPLENBQUNPLFNBQVMsQ0FBQztjQUN2RTtZQUNKLENBQUMsQ0FBQztVQUNOLENBQUMsQ0FBQyxPQUFPQyxLQUFLLEVBQUU7WUFDWlAsT0FBTyxDQUFDQyxJQUFJLENBQUMsMkJBQTJCLEVBQUVNLEtBQUssQ0FBQztVQUNwRDtRQUNKO01BQ0osQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBRUo7RUFDQXVCLFVBQVUsQ0FBQ2QsdUJBQXVCLEVBQUUsSUFBSSxDQUFDO0FBRTNDLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9Gcm9udGVuZC9jb250ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0eXBlb2YgY2hyb21lID09PSAndW5kZWZpbmVkJyB8fCAhY2hyb21lLnJ1bnRpbWUpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdDaHJvbWUgZXh0ZW5zaW9uIEFQSXMgYXJlIG5vdCBhdmFpbGFibGUnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VuZE1lc3NhZ2VUb0JhY2tncm91bmQobWVzc2FnZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3Igc2VuZGluZyBtZXNzYWdlOicsIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBpbiBzZW5kTWVzc2FnZTonLCBlcnJvcik7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBzYWZlbHlTdG9yZVByb2dyZXNzKHByb2dyZXNzLCB0aXRsZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyBcclxuICAgICAgICAgICAgICB2aWRlb1Byb2dyZXNzOiBwcm9ncmVzcyxcclxuICAgICAgICAgICAgICB0aXRsZTogdGl0bGVcclxuICAgICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3Igc3RvcmluZyBwcm9ncmVzczonLCBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQcm9ncmVzcyBzdG9yZWQ6JywgcHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGluIHN0b3JhZ2U6JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuIFxyXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVWaWRlb1RyYWNraW5nKCkge1xyXG4gICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd2aWRlbycpO1xyXG4gICAgICBpZiAoIXZpZGVvRWxlbWVudCkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gdmlkZW8gZWxlbWVudCBmb3VuZC5cIik7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZpZGVvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgKCkgPT4ge1xyXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsndmlkZW9Db21wbGV0ZWQnXSwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnZpZGVvQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSAodmlkZW9FbGVtZW50LmN1cnJlbnRUaW1lIC8gdmlkZW9FbGVtZW50LmR1cmF0aW9uKSAqIDEwMDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9UaXRsZSA9IGRvY3VtZW50LnRpdGxlO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc0ZpeGVkID0gcHJvZ3Jlc3MudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2VUb0JhY2tncm91bmQoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwcm9ncmVzc191cGRhdGVcIixcclxuICAgICAgICAgICAgICAgIHZpZGVvUHJvZ3Jlc3M6IHByb2dyZXNzRml4ZWQsXHJcbiAgICAgICAgICAgICAgICB2aWRlb1RpdGxlOiB2aWRlb1RpdGxlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzYWZlbHlTdG9yZVByb2dyZXNzKHByb2dyZXNzRml4ZWQsIHZpZGVvVGl0bGUpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA9PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyB2aWRlb0NvbXBsZXRlZDogdHJ1ZSB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3Igc3RvcmluZyBjb21wbGV0aW9uOicsIGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBzdG9yaW5nIGNvbXBsZXRpb246JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gIH1cclxuICBzZXRUaW1lb3V0KGluaXRpYWxpemVWaWRlb1RyYWNraW5nLCAxMDAwKTtcclxuXHJcbn07Il0sIm5hbWVzIjpbIndpbmRvdyIsIm9ubG9hZCIsImNocm9tZSIsInJ1bnRpbWUiLCJjb25zb2xlIiwid2FybiIsInNlbmRNZXNzYWdlVG9CYWNrZ3JvdW5kIiwibWVzc2FnZSIsInNlbmRNZXNzYWdlIiwicmVzcG9uc2UiLCJsYXN0RXJyb3IiLCJlcnJvciIsInNhZmVseVN0b3JlUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInRpdGxlIiwic3RvcmFnZSIsInN5bmMiLCJzZXQiLCJ2aWRlb1Byb2dyZXNzIiwibG9nIiwiaW5pdGlhbGl6ZVZpZGVvVHJhY2tpbmciLCJ2aWRlb0VsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0IiwicmVzdWx0IiwidmlkZW9Db21wbGV0ZWQiLCJjdXJyZW50VGltZSIsImR1cmF0aW9uIiwidmlkZW9UaXRsZSIsInByb2dyZXNzRml4ZWQiLCJ0b0ZpeGVkIiwidHlwZSIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9